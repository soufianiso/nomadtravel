// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: proto/movies/movies.proto

package movies

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Movies_ListMovies_FullMethodName = "/movies.Movies/ListMovies"
	Movies_ShowMovie_FullMethodName  = "/movies.Movies/ShowMovie"
)

// MoviesClient is the client API for Movies service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MoviesClient interface {
	ListMovies(ctx context.Context, in *ListMoviesRequest, opts ...grpc.CallOption) (*ListMoviesResponse, error)
	ShowMovie(ctx context.Context, in *ShowMovieRequest, opts ...grpc.CallOption) (*ShowMovieResponse, error)
}

type moviesClient struct {
	cc grpc.ClientConnInterface
}

func NewMoviesClient(cc grpc.ClientConnInterface) MoviesClient {
	return &moviesClient{cc}
}

func (c *moviesClient) ListMovies(ctx context.Context, in *ListMoviesRequest, opts ...grpc.CallOption) (*ListMoviesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMoviesResponse)
	err := c.cc.Invoke(ctx, Movies_ListMovies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesClient) ShowMovie(ctx context.Context, in *ShowMovieRequest, opts ...grpc.CallOption) (*ShowMovieResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShowMovieResponse)
	err := c.cc.Invoke(ctx, Movies_ShowMovie_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MoviesServer is the server API for Movies service.
// All implementations must embed UnimplementedMoviesServer
// for forward compatibility.
type MoviesServer interface {
	ListMovies(context.Context, *ListMoviesRequest) (*ListMoviesResponse, error)
	ShowMovie(context.Context, *ShowMovieRequest) (*ShowMovieResponse, error)
	mustEmbedUnimplementedMoviesServer()
}

// UnimplementedMoviesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMoviesServer struct{}

func (UnimplementedMoviesServer) ListMovies(context.Context, *ListMoviesRequest) (*ListMoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMovies not implemented")
}
func (UnimplementedMoviesServer) ShowMovie(context.Context, *ShowMovieRequest) (*ShowMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowMovie not implemented")
}
func (UnimplementedMoviesServer) mustEmbedUnimplementedMoviesServer() {}
func (UnimplementedMoviesServer) testEmbeddedByValue()                {}

// UnsafeMoviesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MoviesServer will
// result in compilation errors.
type UnsafeMoviesServer interface {
	mustEmbedUnimplementedMoviesServer()
}

func RegisterMoviesServer(s grpc.ServiceRegistrar, srv MoviesServer) {
	// If the following call pancis, it indicates UnimplementedMoviesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Movies_ServiceDesc, srv)
}

func _Movies_ListMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMoviesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesServer).ListMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Movies_ListMovies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesServer).ListMovies(ctx, req.(*ListMoviesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Movies_ShowMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesServer).ShowMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Movies_ShowMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesServer).ShowMovie(ctx, req.(*ShowMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Movies_ServiceDesc is the grpc.ServiceDesc for Movies service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Movies_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "movies.Movies",
	HandlerType: (*MoviesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMovies",
			Handler:    _Movies_ListMovies_Handler,
		},
		{
			MethodName: "ShowMovie",
			Handler:    _Movies_ShowMovie_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/movies/movies.proto",
}
